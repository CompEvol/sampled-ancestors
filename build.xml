<project default="build" basedir=".">

    <!-- Source, JUnit test code and jar library locations. -->
    <property name="src" location="src"/>
    <property name="test" location="src/test"/>

    <!-- Location to check for local copy of beast2 repository -->
    <property name="local-beast-source-root" location="../beast2"/>

    <!-- BEAST 2 currently uses Java 1.8 -->
    <property name="sourceVersion" value="1.8"/>
    <property name="targetVersion" value="1.8"/>

    <!-- Directories necessary for all BEAST 2 packages -->
    <property name="doc" location="doc"/>
    <property name="examples" location="examples"/>
    <property name="fxtemplates" location="fxtemplates"/>

    <!-- BEAST branch and version to build against
         (only different for version tags because of
         a Github peculiarity) -->
    <property name="beast-branch" value="master"/>
    <property name="beast-version" value="master"/>

    <!-- Names of temporary build/test directories -->
    <property name="build" location="build"/>
    <property name="build-beast" location="build-beast"/>
    <property name="beast-source-root" location="beast-source"/>
    <property name="build-test" location="build-test"/>
    <property name="test-reports" location="test-reports"/>
    <property name="dist" location="dist"/>
    <property name="pack" location="${dist}/package"/>
    <property name="beast2path" location="../beast2"/>
    <property name="libBeast2" location="${beast2path}/lib"/>
    <property name="srcBeast2" location="${beast2path}/src"/>
    <property name="beast2classpath" location="${beast2path}/build"/>
    <property name="beastlabsclasspath" location="../BEASTLabs/build"/>


    <path id="classpath">
        <pathelement path="${build}"/>
        <fileset dir="${libBeast2}" includes="junit/junit-platform-console-standalone-1.8.2.jar"/>
        <fileset dir="${libBeast2}" includes="commons-math3-3.6.1.jar"/>
        <pathelement path="${beast2classpath}"/>
        <fileset dir="${beast2path}/lib" includes="jam.jar"/>
        <fileset dir="${beast2path}/lib" includes="beagle.jar"/>
        <fileset dir="${beast2path}/lib" includes="fest.jar"/>
        <fileset dir="${beast2path}/lib" includes="colt.jar"/>
        <pathelement path="../BeastFX/build"/>
    </path>


    <!-- Prepare for compilation -->
    <target name="init">

        <available file="version.xml" property="versionAvailable"/>
        <fail unless="versionAvailable">
            ** Required file version.xml does not exist. **
            If this is a new project, run "ant skeleton" from
            the command line to create the files required for
            your BEAST 2 package.
        </fail>

        <!-- Read package name and version from xml file -->
        <xmlproperty file="version.xml" prefix="fromVersionFile"/>
        <property name="projName" value="${fromVersionFile.package(name)}"/>
        <property name="projVersion" value="${fromVersionFile.package(version)}"/>

        <mkdir dir="${build}"/>
        <mkdir dir="${build-beast}"/>
        <mkdir dir="${beast-source-root}"/>
        <mkdir dir="${dist}"/>

    </target>

    <!-- Get beast -->

    <target name="find-beast" depends="init">
        <available file="${local-beast-source-root}" property="localBeastAvailable"/>
    </target>

    <target name="get-remote-beast" depends="find-beast" unless="localBeastAvailable">
        <echo>No local copy of the beast2 source found at ${local-beast-source-root}.</echo>
        <echo>Compiling against version ${beast-version} from GitHub.</echo>

        <mkdir dir="beast-archive"/>

        <get src="https://github.com/CompEvol/beast2/archive/${beast-branch}.zip"
             dest="beast-archive/beast.zip"/>
        <unzip src="beast-archive/beast.zip" dest="beast-archive"/>

        <copy todir="${beast-source-root}">
            <fileset dir="beast-archive/beast2-${beast-version}" includes="**/*.*"/>
        </copy>

        <delete dir="beast-archive"/>
    </target>

    <target name="get-local-beast" depends="find-beast" if="localBeastAvailable">
        <echo>Compiling against beast2 source found at ${local-beast-source-root}.</echo>

        <copy todir="${beast-source-root}">
            <fileset dir="${local-beast-source-root}" includes="**/*.*"/>
        </copy>
    </target>

    <target name="build-beast" depends="get-local-beast,get-remote-beast">
        <javac
                srcdir="${beast-source-root}/src"
                destdir="${build-beast}"
                source="${sourceVersion}"
                target="${targetVersion}"
                includeantruntime="false"
                fork="yes">
            <classpath>
                <pathelement path="${classpath}"/>
                <fileset dir="${beast-source-root}/lib" includes="**/*.jar"/>
            </classpath>
        </javac>
        <javac
                srcdir="${beast-source-root}/test"
                destdir="${build-beast}"
                source="${sourceVersion}"
                target="${targetVersion}"
                includeantruntime="false"
                fork="yes">
            <classpath>
                <pathelement path="${classpath}"/>
                <fileset dir="${beast-source-root}/lib" includes="**/*.jar"/>
            </classpath>
        </javac>
    </target>

    <!-- Compile -->
    <target name="compile" depends="build-beast">
        <javac target="${targetVersion}" source="${sourceVersion}"
               srcdir="${src}" destdir="${build}"
               includeantruntime="false" fork="yes">
            <exclude name="transmission2/**"/>
            <classpath>
                <pathelement path="${classpath}"/>
                <fileset dir="${beast-source-root}/lib" includes="**/*.jar"/>
                <pathelement path="${build-beast}"/>
                <pathelement path="../BeastFX/build"/>
                <pathelement path="${beastlabsclasspath}"/>
            </classpath>
        </javac>
    </target>

    <target name="copy-resources" depends="compile">
        <copy todir="${build}">
            <fileset dir="${src}"
                     includes="**/*.png"/>
        </copy>
    </target>

    <!-- Prepare for unit test compilation -->
    <target name="init-test" depends="init">
        <mkdir dir="${build-test}"/>
        <mkdir dir="${test-reports}"/>
    </target>

    <!-- Compile unit tests -->
    <target name="compile-test" depends="init-test,compile,copy-resources">
        <javac target="${targetVersion}" source="${sourceVersion}"
               srcdir="${test}" destdir="${build-test}"
               includeantruntime="false" fork="yes">
            <classpath>
                <pathelement path="${classpath}"/>
                <pathelement path="${build}"/>
                <fileset dir="${beast-source-root}/lib" includes="**/*.jar"/>
                <pathelement path="${build-beast}"/>
            </classpath>
        </javac>
    </target>


    <!-- Run unit tests -->
    <target name="test" depends="compile-test">
        <junit printsummary="yes" failureproperty="testFailed" showoutput="true">
            <classpath>
                <pathelement path="${classpath}"/>
                <pathelement path="${build}"/>
                <pathelement path="${build-test}"/>
                <fileset dir="${beast-source-root}/lib" includes="**/*.jar"/>
                <pathelement path="${build-beast}"/>
            </classpath>
            <batchtest fork="yes" todir="${test-reports}">
                <fileset dir="${test}">
                    <include name="**/*.java"/>
                </fileset>
                <formatter type="plain"/>
                <formatter type="plain" usefile="false"/> <!-- to screen -->
            </batchtest>
        </junit>

        <fail if="testFailed" status="1" message="Unit test failed."/>
    </target>


    <!-- Create BEAST 2 package -->
    <target name="build" depends="compile,copy-resources">
        <property name="fullName" value="${projName}.v${projVersion}"/>

        <mkdir dir="${pack}"/>
        <mkdir dir="${pack}/examples"/>
        <mkdir dir="${pack}/fxtemplates"/>
        <mkdir dir="${pack}/lib"/>
        <mkdir dir="${pack}/doc"/>

        <jar jarfile="${pack}/${fullName}.src.jar" basedir="${src}">
            <exclude name="transmission2/**"/>
        </jar>

        <mkdir dir="${lib}"/>
        <copy todir="${pack}/lib">
            <fileset dir="${lib}" includes="*.jar"/>
        </copy>
        <jar jarfile="${pack}/lib/${fullName}.jar" basedir="${build}">
            <exclude name="transmission2/**"/>
        </jar>

        <copy file="README.md" tofile="${pack}/README"/>
        <copy file="COPYING" todir="${pack}"/>
        <copy todir="${pack}">
            <fileset dir="${lib}" includes="LICENSE*"/>
        </copy>

        <mkdir dir="${examples}"/>
        <copy todir="${pack}/examples">
            <fileset dir="${examples}" includes="**/*.xml"/>
        </copy>


        <mkdir dir="${fxtemplates}"/>
        <copy todir="${pack}/fxtemplates">
            <fileset dir="${fxtemplates}" includes="*.xml"/>
        </copy>

        <mkdir dir="${doc}"/>
        <copy todir="${pack}/doc">
            <fileset dir="${doc}" includes="*.tex,*.doc,*.lyx,*.txt"/>
        </copy>

        <copy file="version.xml" todir="${pack}"/>

        <zip destfile="${dist}/${fullName}.zip" basedir="${pack}"/>

        <delete dir="${pack}"/>

        <echo/>
        <echo/>
        <echo>** Package ${dist}/${fullName}.zip created successfully! **</echo>
    </target>


    <!-- Revert to pristine state. -->
    <target name="clean">
        <delete dir="${build}"/>
        <delete dir="${build-beast}"/>
        <delete dir="${beast-source-root}"/>
        <delete dir="${dist}"/>
        <delete dir="${build-test}"/>
        <delete dir="${test-reports}"/>
    </target>

    <condition property="isWindows">
        <os family="windows"/>
    </condition>
    <condition property="isLinux">
        <and>
            <os family="unix"/>
            <not>
                <os family="mac"/>
            </not>
        </and>
    </condition>
    <condition property="isMac">
        <os family="mac"/>
    </condition>

    <target name="installLinux" depends="build" if="isLinux">
        <mkdir dir="${user.home}/.beast/2.7/${projName}"/>
        <unzip src="${dist}/${fullName}.zip" dest="${user.home}/.beast/2.7/${projName}"/>
    </target>

    <target name="installMac" depends="build" if="isMac">
        <mkdir dir="${user.home}/.beast/2.7/${projName}"/>
        <unzip src="${dist}/${fullName}.zip"
               dest="${user.home}/Library/Application Support/BEAST/2.7/${projName}"/>
    </target>

    <target name="installWindows" depends="build" if="isWindows">
        <mkdir dir="${user.home}/BEAST/2.7/${projName}"/>
        <unzip src="${dist}/${fullName}.zip" dest="${user.home}/BEAST/2.7/${projName}"/>
    </target>

    <target name="install" depends="installWindows,installMac,installLinux">
    </target>


</project>
